/*The Punctuation class contains methods to remove and add punctuation to words that are going to be translated
  * 
  * @authors Nikhil Maserang and Julius Gomez
  * @version 2.0
  * @since 2018-11-30
  */
   
   //this handles punctuation
public class Punctuation {
  
   //check if there is a line return///////////////////////////////////////////////////////////////////////////////////
   public static boolean lineReturn(String input)
   {
    if(input.length() == 0)
     {
       return (false);
     }
     if(input.charAt(input.length()-1) == (char)(10))
     {
       return true;
     }
     return false;
   }
   
   //returns the punctation at the beginning of a word/////////////////////////////////////////////////////////////////
   public static String findStartPunct(String input)
   {
    if(input.length() == 0)
    {
      return ("");
    }
    
    boolean onlyPunct = true;
    for(int i = 97; i < 123; i++)
    {
      if( !(input.toLowerCase().indexOf((char)(i)) == -1) )
      {
        onlyPunct = false;
        break;
      }
      else
        onlyPunct = true;
    }
    if(onlyPunct)
      return ("");
    
    boolean letters = true;
    for(int i = input.length() - 1; i > -1; i--)
    {
     letters = true;
     if(input.toLowerCase().charAt(i) > 122 || input.toLowerCase().charAt(i) < 97 )
     {
      for(int j = 97; j < 123; j++)
      {
       if( !(input.toLowerCase().substring(0, i).indexOf((char)(j)) == -1) )
       {
        letters = true;
        break;
       }
       else
       letters = false;
      }
     }
     if(!letters)
     return (input.substring(0, i + 1));
    }
    return "";
   }
   
   //returns the word with the punctuation at the start removed////////////////////////////////////////////////////////
   public static String removeStartPunct(String input)
   {
    if(input.length() == 0)
    {
      return ("");
    }
    
    boolean onlyPunct = true;
    for(int i = 97; i < 123; i++)
    {
      if( !(input.toLowerCase().indexOf((char)(i)) == -1) )
      {
        onlyPunct = false;
        break;
      }
      else
        onlyPunct = true;
    }
    if(onlyPunct)
      return ("");
    
    boolean letters = true;
    for(int i = input.length() - 1; i > -1; i--)
    {
     letters = true;
     if(input.toLowerCase().charAt(i) > 122 || input.toLowerCase().charAt(i) < 97 )
     {
      for(int j = 97; j < 123; j++)
      {
       if( !(input.toLowerCase().substring(0, i).indexOf((char)(j)) == -1) )
       {
        letters = true;
        break;
       }
       else
       letters = false;
      }
     }
     if(!letters)
     return (input.substring(i + 1, input.length()));
    }
    return "";
   }
   
   //returns the punctuation at the end of a word//////////////////////////////////////////////////////////////////////
   public static String findEndPunct(String input)
   {
    if(input.length() == 0)
    {
      return ("");
    }
    
    boolean onlyPunct = true;
    for(int i = 97; i < 123; i++)
    {
      if( !(input.toLowerCase().indexOf((char)(i)) == -1) )
      {
        onlyPunct = false;
        break;
      }
      else
        onlyPunct = true;
    }
    if(onlyPunct)
      return ("");
    
    boolean letters = true;
    for(int i = 0; i < input.length(); i++)
    {
     letters = true;
     if(input.toLowerCase().charAt(i) > 122 || input.toLowerCase().charAt(i) < 97 )
     {
      for(int j = 97; j < 123; j++)
      {
       if( !(input.toLowerCase().substring(i + 1, input.length()).indexOf((char)(j)) == -1) )
       {
        letters = true;
        break;
       }
       else
       letters = false;
      }
     }
     if(!letters)
     return (input.substring(i, input.length()));
    }
    return "";
   }
   
   //returns the word with the punctuation at the end removed//////////////////////////////////////////////////////////
   public static String removeEndPunct(String input)
   {
    if(input.length() == 0)
    {
      return ("");
    }
    
    boolean onlyPunct = true;
    for(int i = 97; i < 123; i++)
    {
      if( !(input.toLowerCase().indexOf((char)(i)) == -1) )
      {
        onlyPunct = false;
        break;
      }
      else
        onlyPunct = true;
    }
    if(onlyPunct)
      return ("");
    
    boolean letters = true;
    for(int i = 0; i < input.length(); i++)
    {
     letters = true;
     if(input.toLowerCase().charAt(i) > 122 || input.toLowerCase().charAt(i) < 97 )
     {
      for(int j = 97; j < 123; j++)
      {
       if( !(input.toLowerCase().substring(i + 1, input.length()).indexOf((char)(j)) == -1) )
       {
        letters = true;
        break;
       }
       else
       letters = false;
      }
     }
     if(!letters)
     return (input.substring(0, i));
    }
    return "";
   }
   
   //adds the punctuation back to the translated word//////////////////////////////////////////////////////////////////
   public static String addPunctuation(String input, String startPunct, String endPunct, boolean hasLineReturn)
   {
     if(input.length() == 0)
     {
       return ("");
     }
     String output = new String(input);
     
     if(startPunct.length() > 0)
     {
       output = startPunct + output;
     }
     if(endPunct.length() > 0)
     {
       output = output + endPunct;
     }
     output.trim();
     
     if(hasLineReturn)
     {
       output = output + (char)(10);
       return output;
     }
     return output;
   }
}
